<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sicheng Lv&#39;s blog</title>
  <subtitle>静止了所有的花开，你好久都没有再来 、</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sichenglv.github.io/"/>
  <updated>2016-10-16T06:00:50.200Z</updated>
  <id>https://sichenglv.github.io/</id>
  
  <author>
    <name>sicheng Lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POJ-1050 To the Max</title>
    <link href="https://sichenglv.github.io/2016/10/09/POJ-1050-To-the-Max/"/>
    <id>https://sichenglv.github.io/2016/10/09/POJ-1050-To-the-Max/</id>
    <published>2016-10-09T01:21:42.000Z</published>
    <updated>2016-10-16T06:00:50.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划-——-最大子矩阵和"><a href="#动态规划-——-最大子矩阵和" class="headerlink" title="动态规划 —— 最大子矩阵和"></a>动态规划 —— 最大子矩阵和</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><blockquote>
<p>给你一个N*N的矩阵，要求找出其一个子矩阵，使其各元素之和为最大。<br>原题地址: <a href="http://poj.org/problem?id=1050" target="_blank" rel="external">POJ-1050 To the Max</a></p>
</blockquote>
<h2 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h2><blockquote>
<ol>
<li>首先要学会最大子段和的求法(这道题的动态规划思想就体现在这里)</li>
<li>利用求最大子段和的算法，<strong> 将二维动态规划问题转化为一维动态规划问题 </strong><br>设一维数组b是二维数组a的i~j(0&lt;=i&lt;j&lt;n)行，对应列元素的和，然后对数组b计算最大子段和。</li>
<li>构造最优解</li>
</ol>
</blockquote>
<h2 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h2><p><strong> 计算最大子段和算法 </strong></p>
<pre><code>/* besti, bestj 记录最大子段和的范围，用于构造最优解 */
int DP(int a[], int n, int&amp; besti, int&amp; bestj)
{
    int i;
    int max = -200000000;

    //当b[i-1]&lt;=0时，记录b[i]=a[i]的位置
    int begin = 0;

    for(i = 1 ; i &lt;= n ; i++ )
    {
        if (b &gt; 0)
            b += a[i];
        else {
            b = a[i];
            begin = i;        //新的起始边界
        }
        if (b &gt; max) {
            max = b;
            besti = begin;
            bestj = i;        //更新左右边界
        }
    }
    return max;
}
</code></pre><p><strong> 计算最大子矩阵和算法 </strong></p>
<pre><code>#define N 101
int main()
{
    int a[N][N];            // N*N矩阵 
    int sum[N];             // 一维数组 

    //构造最优解
    int rowI = 0;            //最大子矩阵的行号
    int rowJ = 0;            //最大子矩阵的行号
    int col = 0;             //最大子矩阵的列号

    int n;
    cin &gt;&gt; n;
    int i, j, k;
    for( i = 1 ; i &lt;= n ; i++ )
        for( j = 1 ; j &lt;= n ; j++ )
            cin &gt;&gt; a[i][j];

    int max = -128;
    for( i = 1 ; i &lt;= n ; i++ )
    {
        memset(sum, 0, sizeof(sum));        //数组置零
        for(j = i ; j &lt;= n ; j++ )
        {
            for( k = 1 ; k &lt;= n ; k++ )
                sum[k] += a[j][k];    //取出第 i, j两行，将这两行之间的列对应相加，形成另外一个数组sum，对数组 sum求最大子段和
            int maxSum = DP(sum, n);
            if(maxSum &gt; max)                //找出最大子矩阵和
            {
                rowI = i;
                rowJ = j;
                col = bestj;                //记录子矩阵的位置
                max = maxSum;
            }
        }
    }
    cout &lt;&lt; max &lt;&lt; endl;                    //输出最大子矩阵和

    /* 构造最优解: 打印出最大和的子矩阵 */
    for(i = rowI; i &lt;= rowJ; i++)
    {
        for(j = 1; j &lt;= col; j++)
        {
            cout &lt;&lt; a[i][j] &lt;&lt; &quot; &quot;;
        }
        cout &lt;&lt; endl;
    }
    return 0;
}
</code></pre><h2 id="算法的时间复杂度："><a href="#算法的时间复杂度：" class="headerlink" title="算法的时间复杂度："></a>算法的时间复杂度：</h2><blockquote>
<p>有三重循环，时间复杂度为O(n^3)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态规划-——-最大子矩阵和&quot;&gt;&lt;a href=&quot;#动态规划-——-最大子矩阵和&quot; class=&quot;headerlink&quot; title=&quot;动态规划 —— 最大子矩阵和&quot;&gt;&lt;/a&gt;动态规划 —— 最大子矩阵和&lt;/h1&gt;&lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="algorithm" scheme="https://sichenglv.github.io/tags/algorithm/"/>
    
      <category term="动态规划" scheme="https://sichenglv.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>MatrixChain</title>
    <link href="https://sichenglv.github.io/2016/10/07/MatrixChain/"/>
    <id>https://sichenglv.github.io/2016/10/07/MatrixChain/</id>
    <published>2016-10-07T03:08:19.000Z</published>
    <updated>2016-10-07T07:49:34.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划-——-矩阵连乘积问题"><a href="#动态规划-——-矩阵连乘积问题" class="headerlink" title="动态规划 —— 矩阵连乘积问题"></a>动态规划 —— 矩阵连乘积问题</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态规划-——-矩阵连乘积问题&quot;&gt;&lt;a href=&quot;#动态规划-——-矩阵连乘积问题&quot; class=&quot;headerlink&quot; title=&quot;动态规划 —— 矩阵连乘积问题&quot;&gt;&lt;/a&gt;动态规划 —— 矩阵连乘积问题&lt;/h2&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://sichenglv.github.io/tags/algorithm/"/>
    
  </entry>
  
</feed>
