<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sicheng Lv&#39;s blog</title>
  <subtitle>静止了所有的花开，你好久都没有再来 、</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sichenglv.github.io/"/>
  <updated>2016-10-09T02:56:47.403Z</updated>
  <id>https://sichenglv.github.io/</id>
  
  <author>
    <name>sicheng Lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POJ-1050 To the Max</title>
    <link href="https://sichenglv.github.io/2016/10/09/POJ-1050-To-the-Max/"/>
    <id>https://sichenglv.github.io/2016/10/09/POJ-1050-To-the-Max/</id>
    <published>2016-10-09T01:21:42.000Z</published>
    <updated>2016-10-09T02:56:47.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划-——-最大子矩阵和"><a href="#动态规划-——-最大子矩阵和" class="headerlink" title="动态规划 —— 最大子矩阵和"></a>动态规划 —— 最大子矩阵和</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><blockquote>
<p>给你一个N*N的矩阵，要求找出其一个子矩阵，使其各元素之和为最大。<br>原题地址: <a href="http://poj.org/problem?id=1050" target="_blank" rel="external">POJ-1050 To the Max</a></p>
</blockquote>
<h2 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h2><blockquote>
<ol>
<li>首先要学会最大子段和的求法(这道题的动态规划思想就体现在这里)</li>
<li>利用求最大子段和的算法，取出原矩阵的第i,j两行，把这两行之间同一列的都加起来形成另外一个数组，然后求这个数组的最大子段和，出来的这个和,就是这两行之间高度为 j-i 的子矩阵中最大的和。(请读者好好体会这个地方为什么是把同一列加起来)</li>
<li>构造最优解</li>
</ol>
</blockquote>
<h2 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h2><p><strong> 计算最大子段和算法 </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/* besti, bestj 记录最大子段和的范围，用于构造最优解 */</div><div class="line">int DP(int a[], int n, int&amp; besti, int&amp; bestj)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    int max = -200000000;</div><div class="line"></div><div class="line">	//当b[i-1]&lt;=0时，记录b[i]=a[i]的位置</div><div class="line">	int begin = 0;</div><div class="line"></div><div class="line">    for(i = 1 ; i &lt;= n ; i++ )</div><div class="line">    &#123;</div><div class="line">        if (b &gt; 0)</div><div class="line">            b += a[i];</div><div class="line">        else &#123;</div><div class="line">        	b = a[i];</div><div class="line">        	begin = i;		//新的起始边界</div><div class="line">		&#125;</div><div class="line">        if (b &gt; max) &#123;</div><div class="line">			max = b;</div><div class="line">               besti = begin;</div><div class="line">			bestj = i;		//更新左右边界</div><div class="line">		&#125;</div><div class="line">    &#125;</div><div class="line">    return max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 计算最大子矩阵和算法 </strong></p>
<figure class="highlight plain"><figcaption><span>N 101</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int a[N][N];			// N*N矩阵 </div><div class="line">    int sum[N]; 			// 一维数组 </div><div class="line"></div><div class="line">    //构造最优解</div><div class="line">    int rowI = 0;			//最大子矩阵的行号</div><div class="line">    int rowJ = 0;			//最大子矩阵的行号</div><div class="line">	int col = 0; 			//最大子矩阵的列号</div><div class="line"></div><div class="line">	int n;</div><div class="line">	cin &gt;&gt; n;</div><div class="line">	int i, j, k;</div><div class="line">    for( i = 1 ; i &lt;= n ; i++ )</div><div class="line">        for( j = 1 ; j &lt;= n ; j++ )</div><div class="line">            cin &gt;&gt; a[i][j];</div><div class="line"></div><div class="line">    int max = -128;</div><div class="line">    for( i = 1 ; i &lt;= n ; i++ )</div><div class="line">    &#123;</div><div class="line">        memset(sum, 0, sizeof(sum));		//数组置零</div><div class="line">        for(j = i ; j &lt;= n ; j++ )</div><div class="line">        &#123;</div><div class="line">            for( k = 1 ; k &lt;= n ; k++ )</div><div class="line">                sum[k] += a[j][k];	//取出第 i, j两行，将这两行之间的列对应相加，形成另外一个数组sum，对数组 sum求最大子段和</div><div class="line">            int maxSum = DP(sum, n);</div><div class="line">            if(maxSum &gt; max)				//找出最大子矩阵和</div><div class="line">            &#123;</div><div class="line">            	rowI = i;</div><div class="line">            	rowJ = j;</div><div class="line">            	col = bestj;				//记录子矩阵的位置</div><div class="line">				max = maxSum;</div><div class="line">			&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; max &lt;&lt; endl;					//输出最大子矩阵和</div><div class="line"></div><div class="line">    /* 构造最优解: 打印出最大和的子矩阵 */</div><div class="line">    for(i = rowI; i &lt;= rowJ; i++)</div><div class="line">    &#123;</div><div class="line">    	for(j = 1; j &lt;= col; j++)</div><div class="line">    	&#123;</div><div class="line">    		cout &lt;&lt; a[i][j] &lt;&lt; &quot; &quot;;</div><div class="line">		&#125;</div><div class="line">		cout &lt;&lt; endl;</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态规划-——-最大子矩阵和&quot;&gt;&lt;a href=&quot;#动态规划-——-最大子矩阵和&quot; class=&quot;headerlink&quot; title=&quot;动态规划 —— 最大子矩阵和&quot;&gt;&lt;/a&gt;动态规划 —— 最大子矩阵和&lt;/h1&gt;&lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="algorithm" scheme="https://sichenglv.github.io/tags/algorithm/"/>
    
      <category term="动态规划" scheme="https://sichenglv.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>MatrixChain</title>
    <link href="https://sichenglv.github.io/2016/10/07/MatrixChain/"/>
    <id>https://sichenglv.github.io/2016/10/07/MatrixChain/</id>
    <published>2016-10-07T03:08:19.000Z</published>
    <updated>2016-10-07T07:49:34.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划-——-矩阵连乘积问题"><a href="#动态规划-——-矩阵连乘积问题" class="headerlink" title="动态规划 —— 矩阵连乘积问题"></a>动态规划 —— 矩阵连乘积问题</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态规划-——-矩阵连乘积问题&quot;&gt;&lt;a href=&quot;#动态规划-——-矩阵连乘积问题&quot; class=&quot;headerlink&quot; title=&quot;动态规划 —— 矩阵连乘积问题&quot;&gt;&lt;/a&gt;动态规划 —— 矩阵连乘积问题&lt;/h2&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://sichenglv.github.io/tags/algorithm/"/>
    
  </entry>
  
</feed>
