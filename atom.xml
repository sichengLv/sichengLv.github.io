<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sicheng Lv&#39;s blog</title>
  <subtitle>静止了所有的花开，你好久都没有再来 、</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sichenglv.github.io/"/>
  <updated>2016-10-09T02:56:47.403Z</updated>
  <id>https://sichenglv.github.io/</id>
  
  <author>
    <name>sicheng Lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POJ-1050 To the Max</title>
    <link href="https://sichenglv.github.io/2016/10/09/POJ-1050-To-the-Max/"/>
    <id>https://sichenglv.github.io/2016/10/09/POJ-1050-To-the-Max/</id>
    <published>2016-10-09T01:21:42.000Z</published>
    <updated>2016-10-09T02:56:47.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划-——-最大子矩阵和"><a href="#动态规划-——-最大子矩阵和" class="headerlink" title="动态规划 —— 最大子矩阵和"></a>动态规划 —— 最大子矩阵和</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><blockquote>
<p>给你一个N*N的矩阵，要求找出其一个子矩阵，使其各元素之和为最大。<br>原题地址: <a href="http://poj.org/problem?id=1050" target="_blank" rel="external">POJ-1050 To the Max</a></p>
</blockquote>
<h2 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h2><blockquote>
<ol>
<li>首先要学会最大子段和的求法(这道题的动态规划思想就体现在这里)</li>
<li>利用求最大子段和的算法，取出原矩阵的第i,j两行，把这两行之间同一列的都加起来形成另外一个数组，然后求这个数组的最大子段和，出来的这个和,就是这两行之间高度为 j-i 的子矩阵中最大的和。(请读者好好体会这个地方为什么是把同一列加起来)</li>
<li>构造最优解</li>
</ol>
</blockquote>
<h2 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h2><p><strong> 计算最大子段和算法 </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/* besti, bestj 记录最大子段和的范围，用于构造最优解 */</div><div class="line">int DP(int a[], int n, int&amp; besti, int&amp; bestj)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    int max = -200000000;</div><div class="line"></div><div class="line">	//当b[i-1]&lt;=0时，记录b[i]=a[i]的位置</div><div class="line">	int begin = 0;</div><div class="line"></div><div class="line">    for(i = 1 ; i &lt;= n ; i++ )</div><div class="line">    &#123;</div><div class="line">        if (b &gt; 0)</div><div class="line">            b += a[i];</div><div class="line">        else &#123;</div><div class="line">        	b = a[i];</div><div class="line">        	begin = i;		//新的起始边界</div><div class="line">		&#125;</div><div class="line">        if (b &gt; max) &#123;</div><div class="line">			max = b;</div><div class="line">               besti = begin;</div><div class="line">			bestj = i;		//更新左右边界</div><div class="line">		&#125;</div><div class="line">    &#125;</div><div class="line">    return max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 计算最大子矩阵和算法 </strong></p>
<figure class="highlight plain"><figcaption><span>N 101</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int a[N][N];			// N*N矩阵 </div><div class="line">    int sum[N]; 			// 一维数组 </div><div class="line"></div><div class="line">    //构造最优解</div><div class="line">    int rowI = 0;			//最大子矩阵的行号</div><div class="line">    int rowJ = 0;			//最大子矩阵的行号</div><div class="line">	int col = 0; 			//最大子矩阵的列号</div><div class="line"></div><div class="line">	int n;</div><div class="line">	cin &gt;&gt; n;</div><div class="line">	int i, j, k;</div><div class="line">    for( i = 1 ; i &lt;= n ; i++ )</div><div class="line">        for( j = 1 ; j &lt;= n ; j++ )</div><div class="line">            cin &gt;&gt; a[i][j];</div><div class="line"></div><div class="line">    int max = -128;</div><div class="line">    for( i = 1 ; i &lt;= n ; i++ )</div><div class="line">    &#123;</div><div class="line">        memset(sum, 0, sizeof(sum));		//数组置零</div><div class="line">        for(j = i ; j &lt;= n ; j++ )</div><div class="line">        &#123;</div><div class="line">            for( k = 1 ; k &lt;= n ; k++ )</div><div class="line">                sum[k] += a[j][k];	//取出第 i, j两行，将这两行之间的列对应相加，形成另外一个数组sum，对数组 sum求最大子段和</div><div class="line">            int maxSum = DP(sum, n);</div><div class="line">            if(maxSum &gt; max)				//找出最大子矩阵和</div><div class="line">            &#123;</div><div class="line">            	rowI = i;</div><div class="line">            	rowJ = j;</div><div class="line">            	col = bestj;				//记录子矩阵的位置</div><div class="line">				max = maxSum;</div><div class="line">			&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; max &lt;&lt; endl;					//输出最大子矩阵和</div><div class="line"></div><div class="line">    /* 构造最优解: 打印出最大和的子矩阵 */</div><div class="line">    for(i = rowI; i &lt;= rowJ; i++)</div><div class="line">    &#123;</div><div class="line">    	for(j = 1; j &lt;= col; j++)</div><div class="line">    	&#123;</div><div class="line">    		cout &lt;&lt; a[i][j] &lt;&lt; &quot; &quot;;</div><div class="line">		&#125;</div><div class="line">		cout &lt;&lt; endl;</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态规划-——-最大子矩阵和&quot;&gt;&lt;a href=&quot;#动态规划-——-最大子矩阵和&quot; class=&quot;headerlink&quot; title=&quot;动态规划 —— 最大子矩阵和&quot;&gt;&lt;/a&gt;动态规划 —— 最大子矩阵和&lt;/h1&gt;&lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="algorithm" scheme="https://sichenglv.github.io/tags/algorithm/"/>
    
      <category term="动态规划" scheme="https://sichenglv.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>MatrixChain</title>
    <link href="https://sichenglv.github.io/2016/10/07/MatrixChain/"/>
    <id>https://sichenglv.github.io/2016/10/07/MatrixChain/</id>
    <published>2016-10-07T03:08:19.000Z</published>
    <updated>2016-10-07T07:49:34.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划-——-矩阵连乘积问题"><a href="#动态规划-——-矩阵连乘积问题" class="headerlink" title="动态规划 —— 矩阵连乘积问题"></a>动态规划 —— 矩阵连乘积问题</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态规划-——-矩阵连乘积问题&quot;&gt;&lt;a href=&quot;#动态规划-——-矩阵连乘积问题&quot; class=&quot;headerlink&quot; title=&quot;动态规划 —— 矩阵连乘积问题&quot;&gt;&lt;/a&gt;动态规划 —— 矩阵连乘积问题&lt;/h2&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://sichenglv.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>从你的全世界路过 —— 我爱上了一个不爱我的人</title>
    <link href="https://sichenglv.github.io/2016/10/05/myfirstblog/"/>
    <id>https://sichenglv.github.io/2016/10/05/myfirstblog/</id>
    <published>2016-10-05T13:25:20.000Z</published>
    <updated>2016-10-07T03:35:57.184Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/3186028-85bfa3ee5b80669b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从你的全世界路过"></p>
<h4 id="01-遇见你，我发现了另一个世界"><a href="#01-遇见你，我发现了另一个世界" class="headerlink" title="01 遇见你，我发现了另一个世界"></a>01 遇见你，我发现了另一个世界</h4><hr>
<p>  年纪轻轻的我还不懂爱情，那时我15岁，初二。直到有一天，班里转来一个女同学，我的世界从此鸡犬不宁<strong>……</strong></p>
<p>  从一个眼神，一道题目，<strong>一条短信</strong>，一个魔方，<strong>一支钢笔</strong>，一场电影，一本小说，<strong>一句我喜欢你</strong>，我和她的故事才刚刚开始！</p>
<p>当时的我傻乎乎地认为，喜欢一个人，只要对她好就可以了。以为这样可以天长地久，以为这样可以白头到老，以为这样可以一直在一起。<strong>然而事实却是这样，我爱上了一个不爱我的人，我只不过是活在自己的世界里，从头到尾，她只是一个半真半假的演员。</strong></p>
<h4 id="02-就是你，闯进了我的世界"><a href="#02-就是你，闯进了我的世界" class="headerlink" title="02 就是你，闯进了我的世界"></a>02 就是你，闯进了我的世界</h4><hr>
<p>在爱情来临之前，我不知道原来世界上还有竟如此美妙的东西。</p>
<ul>
<li>我全部的心跳随你跳</li>
<li>我全部的精力陪你闹</li>
<li>我所有的情绪被你扰</li>
</ul>
<h4 id="03-爱上你，仿佛拥有了全世界"><a href="#03-爱上你，仿佛拥有了全世界" class="headerlink" title="03 爱上你，仿佛拥有了全世界"></a>03 爱上你，仿佛拥有了全世界</h4><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/3186028-d5d0890420e02c6c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="带你去穿越~~"></p>
<blockquote>
<blockquote>
<p>我还是很喜欢你，像风走了八千里，不问归期。<br>我还是很喜欢你，像春去冬来，花开又落，乐此不疲。</p>
<p>我爱你，是两人共用一条命。<br>我爱你，就像你爱我的那样(You is to me as what You is to me)。</p>
</blockquote>
<p>我曾说过：要带你去到天涯海角，却不曾想到我们半路摔倒。</p>
</blockquote>
<h4 id="04-从你的全世界路过"><a href="#04-从你的全世界路过" class="headerlink" title="04 从你的全世界路过"></a>04 从你的全世界路过</h4><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/3186028-8d6cfe6d4b936f42.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>直到从你的全世界路过，我才知道，我爱上了一个不爱我的人。<br>不过，我坚信那曾经是一个美好的爱情故事。</p>
</blockquote>
<p>  很幸运，在最美的年纪遇上你。<br>  谢谢你，在我的路上停驻，给我美妙的爱情。<br>  我期待，下一个要出现的你。</p>
<h4 id="05-我希望有个如你一般的人"><a href="#05-我希望有个如你一般的人" class="headerlink" title="05 我希望有个如你一般的人"></a>05 我希望有个如你一般的人</h4><hr>
<blockquote>
<p>前几天，逛微博，看到有人说：“放弃一个爱的人是什么感觉？<br>是我不删你好友？不拉你进黑名单？不取消关注？也不删你电话？<br>我要做的就是，不冷不热，不悲不喜。<br>我就是要你看着我所有的动态，都与你无关却又在你身边不吵不闹阴魂不散。”</p>
</blockquote>
<p>  <strong> 我希望有个如你一般的人 </strong></p>
<p>  <strong> 你是谁 ？</strong></p>
<p>  <strong> 你又在哪里 ？</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3186028-85bfa3ee5b80669b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
    
    </summary>
    
    
      <category term="爱情" scheme="https://sichenglv.github.io/tags/%E7%88%B1%E6%83%85/"/>
    
  </entry>
  
</feed>
